//MC1でvelモード, MC2でposモードに変更可能 各モードに入ったのちM〇〇を入力で操作可能
//logが出る 105.0000        5.5700  100.5478        10018.9189
//無負荷で100rad/s出せた


#include <SimpleFOC.h>

// TODO: motor instance
BLDCMotor motor = BLDCMotor(11, 5.57/2.0);

// TODO: driver instance
BLDCDriver3PWM driver = BLDCDriver3PWM(25, 26, 27, 33);

// TODO: sensor instance
MagneticSensorSPI sensor = MagneticSensorSPI(AS5048_SPI, 5); // cs=ss=IO5

// instantiate the commander
Commander command = Commander(Serial);
void doMotor(char *cmd) { command.motor(&motor, cmd); }
void doLimit(char* cmd) { command.scalar(&motor.voltage_limit, cmd); }

void setup()
{

  // use monitoring with serial
  Serial.begin(115200);
  // enable more verbose output for debugging
  // comment out if not needed
  // SimpleFOCDebug::enable(&Serial);

  // init the sensor
  sensor.init();
  // link the motor to the sensor
  motor.linkSensor(&sensor);

  // TODO: driver config
  // init the driver
  driver.voltage_power_supply = 12;
  driver.voltage_limit = 12;
  if (!driver.init())
  {
    Serial.println("Driver init failed!");
    return;
  }
  // link driver
  motor.linkDriver(&driver);

  // TODO: motor conf
  // motor.voltage_limit = 12;

  // set motion control loop to be used
  motor.torque_controller = TorqueControlType::voltage;
  motor.controller = MotionControlType::velocity;

  // use monitoring with serial
  // comment out if not needed
  motor.useMonitoring(Serial);
  motor.monitor_variables = _MON_TARGET | _MON_VOLT_Q | _MON_VEL | _MON_ANGLE; 
  motor.monitor_downsample = 1000; // default 10

  // initialize motor
  if (!motor.init())
  {
    Serial.println("Motor init failed!");
    return;
  }
  // align sensor and start FOC
  if (!motor.initFOC())
  {
    Serial.println("FOC init failed!");
    return;
  }

  // set the initial motor target
  motor.target = 120; // rad/s

  // add target command M
  command.add('M', doMotor, "Motor");
  command.add('L', doLimit, "voltage limit");

  Serial.println(F("Motor ready."));
  Serial.println(F("Set the target using serial terminal and command M:"));
  _delay(1000);
}

void loop()
{
  // main FOC algorithm function
  motor.loopFOC();
  motor.monitor();

  // Motion control function
  motor.move();

  // user communication
  command.run();
}